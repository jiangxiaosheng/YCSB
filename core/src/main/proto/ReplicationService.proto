syntax = "proto3";

option java_multiple_files = true;
option java_package = "site.ycsb";
option java_outer_classname = "Rubble";
option objc_class_prefix = "Rub";

package rubble;

service RubbleKvStoreService {
    // an internal rpc call used by the upstream (except the tail node) 
    // to synchronize states to the downstream nodes in the chain
    rpc Sync (stream SyncRequest) returns (stream SyncReply) {} 

    // perform db operations (CRUD)
    rpc DoOp(stream Op) returns (stream OpReply){}

    // used by the tail node to send the true rely to the replicator
    rpc SendReply(stream OpReply) returns (stream Reply){}
}

enum OpType {
    GET = 0;
    PUT = 1;
    DELETE = 2;
    UPDATE = 3;
}

message Op {
    bool has_edits = 1;
    int32 batchSize = 2;
    repeated string edits = 3;
    repeated SingleOp ops = 4;
    repeated int64 time = 5;
}

message OpReply {
    string sync_reply = 1;
    int32 batchSize = 2;
    repeated SingleOpReply replies = 3;
    repeated int64 time = 4;
}

message SingleOp{
    string key = 1;
    string value = 2;
    uint64 Id = 3;
    OpType type = 4;
}

message SingleOpReply{
    bool ok = 1;
    string key = 2;
    string value = 3;
    string status = 4;
    int64  Id = 5;
    OpType type = 6;
}

message OpReplies{
    repeated OpReply reply = 1;
}

//Reply from the replicator to the tail node, probably not needed
message Reply{
    bool ok = 1;
}

message SyncRequest {
    // a json string of args
    string  args = 1;
}

message SyncReply {
    string message = 1;
}
  

// service ReplicationService {
//   rpc doOp (stream Request) returns (stream Reply) {}
// }

// enum OpType {
//     READ   = 0;
//     SCAN   = 1;
//     INSERT = 2;
//     UPDATE = 3;
// }

// message Request {
//     int32 batchSize = 1;
//     bool  has_edits = 2;
//     repeated OpType type  = 3;
//     repeated string key   = 4;
//     repeated string value = 5;
//     repeated int64  time  = 6;
//     repeated string edits = 7;
// }
  
// message Reply {
//     int32 batchSize = 1;
//     repeated OpType type   = 2;
//     repeated string status = 3;
//     repeated int64  time   = 4;
// }